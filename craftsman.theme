<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_html().
 */
function craftsman_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
  // If is debug.
  $variables['debug'] = theme_get_setting('debug');
}

/**
 * Implements hook_preprocess_views_view()
 */
function craftsman_preprocess_views_view(&$variables) {
  if ($variables['id'] == 'articles') {
    $variables['#attached']['library'][] = 'craftsman/view-articles';
  }
  elseif ($variables['id'] == 'events') {
    $variables['#attached']['library'][] = 'craftsman/view-events';
  }
}

/**
 * Implement hook_preprocess_image_style()
 */
function craftsman_preprocess_image_style(&$variables) {
  // dump($variables['style_name']);
  if ($variables['style_name']) {
    $image_style = ImageStyle::load($variables['style_name']);

    $dest = $image_style->buildUri($variables['uri']);

    $created = $image_style->createDerivative($variables['uri'], $dest);

    // dump($created);
  }
}

/**
 * Implement hook_preprocess_node()
 */
function craftsman_preprocess_node(&$variables) {
  // $variables['content_attributes']->setAttribute('src', '//zeropaper.github.io/visual-fiha/');
  // $variables['content_attributes']['src'] = '//zeropaper.github.io/visual-fiha/';
}